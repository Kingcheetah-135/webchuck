import DeferredPromise from "./DeferredPromise";
import type { File, Filename } from "./utils";
export default class Chuck {
    private audioWorkletNode;
    private deferredPromises;
    private deferredPromiseCounter;
    private eventCallbacks;
    private eventCallbackCounter;
    private isReady;
    constructor(preloadedFiles: File[], audioContext: AudioContext, wasm: ArrayBuffer, chuckID?: number);
    static init(filenamesToPreload: Filename[]): Promise<Chuck>;
    private nextDeferID;
    get context(): BaseAudioContext;
    get numberOfInputs(): number;
    get numberOfOutputs(): number;
    createFile(directory: string, filename: string, data: string): void;
    runCode(code: string): DeferredPromise<unknown>;
    runCodeWithReplacementDac(code: string, dacName: string): DeferredPromise<unknown>;
    replaceCode(code: string): DeferredPromise<unknown>;
    replaceCodeWithReplacementDac(code: string, dacName: string): DeferredPromise<unknown>;
    removeLastCode(): DeferredPromise<unknown>;
    runFile(filename: string): DeferredPromise<unknown>;
    runFileWithReplacementDac(filename: string, dacName: string): DeferredPromise<unknown>;
    runFileWithArgs(filename: string, colonSeparatedArgs: string): DeferredPromise<unknown>;
    runFileWithArgsWithReplacementDac(filename: string, colonSeparatedArgs: string, dacName: string): DeferredPromise<unknown>;
    replaceFile(filename: string): DeferredPromise<unknown>;
    replaceFileWithReplacementDac(filename: string, dacName: string): DeferredPromise<unknown>;
    replaceFileWithArgs(filename: string, colonSeparatedArgs: string): DeferredPromise<unknown>;
    replaceFileWithArgsWithReplacementDac(filename: string, colonSeparatedArgs: string, dacName: string): DeferredPromise<unknown>;
    removeShred(shred: string): DeferredPromise<unknown>;
    isShredActive(shred: string): DeferredPromise<unknown>;
    signalEvent(variable: string): void;
    broadcastEvent(variable: string): void;
    listenForEventOnce(variable: string, callback: () => void): void;
    startListeningForEvent(variable: string, callback: () => void): number;
    stopListeningForEvent(variable: string, callbackID: number): void;
    setInt(variable: string, value: number): void;
    getInt(variable: string): DeferredPromise<unknown>;
    setFloat(variable: string, value: number): void;
    getFloat(variable: string): DeferredPromise<unknown>;
    setString(variable: string, value: string): void;
    getString(variable: string): DeferredPromise<unknown>;
    setIntArray(variable: string, values: number[]): void;
    getIntArray(variable: string): DeferredPromise<unknown>;
    setIntArrayValue(variable: string, index: number, value: number[]): void;
    getIntArrayValue(variable: string, index: number): DeferredPromise<unknown>;
    setAssociativeIntArrayValue(variable: string, key: string, value: string): void;
    getAssociativeIntArrayValue(variable: string, key: string): DeferredPromise<unknown>;
    setFloatArray(variable: string, values: number[]): void;
    getFloatArray(variable: string): DeferredPromise<unknown>;
    setFloatArrayValue(variable: string, index: number, value: number): void;
    getFloatArrayValue(variable: string, index: number): DeferredPromise<unknown>;
    setAssociativeFloatArrayValue(variable: string, key: string, value: number): void;
    getAssociativeFloatArrayValue(variable: string, key: string): DeferredPromise<unknown>;
    clearChuckInstance(): void;
    clearGlobals(): void;
    private sendMessage;
    private receiveMessage;
}
